import time
import uuid


def next_id():
    return '%015d%s000' % (int(time.time() * 1000), uuid.uuid4().hex)


class Page(object):
    """
    使用方法
    eg:
        num = await V_XXL_JOB_QRTZ_TRIGGER_INFO.findNumber(selectField='count(*)',where=Where)
        p = Page(num, int(CurrentPage), int(PageSize))  # totalcount  # currentpage  # pagesize
        if num == 0:
            data1 = dict(page=p.GetDict, res=[])
        else:
            list = await V_XXL_JOB_QRTZ_TRIGGER_INFO.findAll(selectField='*',where=Where,orderBy=OrderBy, limit=(p.offset, p.limit))
            data1 = dict(page=p.GetDict, res=list)
    """

    def __init__(self, item_count: int, page_index: int = 1, page_size: int = 10):
        self.item_count = item_count  # 总数
        self.page_size = page_size  # 没叶多少条
        self.page_count = item_count // page_size + (1 if item_count % page_size > 0 else 0)
        if (item_count == 0) or (page_index > self.page_count):
            self.offset = 0
            self.limit = 0
            self.page_index = 1
        else:
            self.page_index = page_index
            self.offset = self.page_size * (page_index - 1)
            self.limit = self.page_size
        self.has_next = self.page_index < self.page_count
        self.has_previous = self.page_index > 1

    def __str__(self):
        return 'item_count: %s, page_count: %s, page_index: %s, page_size: %s, offset: %s, limit: %s' % (
            self.item_count, self.page_count, self.page_index, self.page_size, self.offset, self.limit)

    __repr__ = __str__

    @property
    def GetDict(self):
        return dict(item_count=self.item_count, page_count=self.page_count, page_index=self.page_index,
                    page_size=self.page_size, offset=self.offset, limit=self.limit)


def data_dict_pares_tree(lis):
    """
    data dict 数据字典数据解析
    """
    l = []
    entities = {d['id']: {'id': d['id'], 'pid': d['pid'], 'label': d['value'], 'code': d['code']} for d in lis}
    for e_id in entities:
        entitiy = entities[e_id]
        fid = entitiy['pid']
        if fid == '-1':
            l.append(entitiy)
        else:
            entities[fid].setdefault('children', []).append(entitiy)
    return l